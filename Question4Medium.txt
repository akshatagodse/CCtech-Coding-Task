Question : Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

class Solution {
    public int findMin(int[] nums) {
       int length = nums.length;
        for(int i = 0; i < length - 1; i++) { 
            if(nums[i] > nums[i + 1]) // check previous number is greater than next number 
                return nums[i + 1];   // if next number is less than previous then returns it
        }
        return nums[0];   //if array contains single element then it will be returned
        
    }
}